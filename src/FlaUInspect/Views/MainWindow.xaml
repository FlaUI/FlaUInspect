<Window x:Class="FlaUInspect.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:core="clr-namespace:FlaUInspect.Core"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:converters="clr-namespace:FlaUInspect.Core.Converters"
        xmlns:viewModels="clr-namespace:FlaUInspect.ViewModels"
        xmlns:models="clr-namespace:FlaUInspect.Models"
        Title="FlaUInspect"
        d:DesignHeight="600"
        d:DesignWidth="800"
        ResizeMode="CanResizeWithGrip"
        mc:Ignorable="d"
        d:LayoutOverrides="Width, Height" d:DataContext="{d:DesignInstance viewModels:MainViewModel}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Styles/ImageStyles.xaml" />
                <ResourceDictionary Source="../Resources/Icons.xaml" />
                <ResourceDictionary Source="/Resources/DetailsIcons.xaml" />
                <ResourceDictionary Source="/Resources/RibbonIcons.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="SelectableLabel"
                   TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="IsReadOnly" Value="True" />
            </Style>

            <converters:BooleanToVisibilityConverter x:Key="BooleanToCollapsedVisibilityConverter"
                                               FalseVisibility="Hidden"
                                               TrueVisibility="Visible" />
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:AlternationToColorConverter x:Key="AlternationToColorConverter"
                                              AlternativeBrush="#ffeeeeee"
                                              Brush="#ffffffff" />
            <converters:CountToVisibilityConverter x:Key="CountToVisibilityConverter" />

            <Style x:Key="BorderedHeaderExpander"
                   TargetType="Expander">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="Foreground" Value="#202020"/>
                <Setter Property="Background" Value="#D0D0D0"/>
            </Style>
        </ResourceDictionary>

    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Key="F5"
                    Command="{Binding RefreshCommand}" />
    </Window.InputBindings>
    <Grid>
        <DockPanel>
            <Grid d:DataContext="{d:DesignInstance viewModels:MainViewModel}" DockPanel.Dock="Top">
                <Grid.Resources>
                    <Style x:Key="RibbonButtonStyle"
                                               TargetType="{x:Type ButtonBase}">
                                            <Setter Property="Width" Value="32" />
                                            <Setter Property="Height" Value="32" />
                                            <Setter Property="Margin" Value="4" />
                                        </Style>
                    <Style x:Key="SelectionRadioButtonStyle"
                           TargetType="RadioButton">
                            <Setter Property="Background" Value="#DEDEDE"/>
                            <Setter Property="BorderBrush" Value="Gray"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Padding" Value="4"/>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Width" Value="32" />
                            <Setter Property="Height" Value="32" />
                            <Setter Property="Margin" Value="2" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="RadioButton">
                                        <Border Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}">
                                            <ContentPresenter HorizontalAlignment="Center"
                                                              VerticalAlignment="Center"
                                                              RecognizesAccessKey="True"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="Background" Value="#FFCCE5FF"/>
                                                <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                <Setter Property="Foreground" Value="#FF3399FF"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#FFE6F2FF"/>
                                                <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.5"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    <Style x:Key="ViewBoxStyle"
                           TargetType="Viewbox">
                        <Setter Property="Width" Value="20"/>
                        <Setter Property="Height" Value="20"/>
                        <Setter Property="Stretch" Value="Uniform"/>
        
                    </Style>
                </Grid.Resources>
                <StackPanel HorizontalAlignment="Left"
                            Orientation="Horizontal">
                <Button Command="{Binding CaptureSelectedItemCommand}"
                        Style="{StaticResource RibbonButtonStyle}"
                        ToolTip="Capture selected item">
                    <StackPanel Orientation="Vertical">
                        <Viewbox Width="20"
                                 Height="20"
                                 Stretch="Uniform">
                            <ContentControl Content="{StaticResource CaptureSelectedItemIcon}" />
                        </Viewbox>
                    </StackPanel>
                </Button>
        
                <Button Command="{Binding RefreshCommand}"
                        Style="{StaticResource RibbonButtonStyle}"
                        ToolTip="Refresh">
                    <StackPanel Orientation="Vertical">
                            <Viewbox Style="{StaticResource ViewBoxStyle}">
                            <ContentControl Content="{StaticResource RefreshIcon}" />
                        </Viewbox>
                    </StackPanel>
                </Button>
                <Rectangle Width="12"
                           Height="32" />
                <RadioButton IsChecked="{Binding EnableHoverMode}"
                             Style="{StaticResource SelectionRadioButtonStyle}"
                              GroupName="SelectionMode"
                              ToolTip="EnableHoverModeIcon Mode (use Ctrl)">
                    <StackPanel Orientation="Vertical">
                            <Viewbox  Style="{StaticResource ViewBoxStyle}">
                            <ContentControl Content="{StaticResource EnableHoverModeIcon}" />
                        </Viewbox>
                    </StackPanel>
                </RadioButton>
                <RadioButton IsChecked="{Binding EnableHighLightSelectionMode}"
                             Style="{StaticResource SelectionRadioButtonStyle}"
                             GroupName="SelectionMode"
                             ToolTip="Highlight selected control">
                    <StackPanel Orientation="Vertical">
                            <Viewbox  Style="{StaticResource ViewBoxStyle}">
                            <ContentControl Content="{StaticResource EnableHoverModeIcon}" />
                        </Viewbox>
                    </StackPanel>
                </RadioButton>
                <RadioButton IsChecked="{Binding EnableFocusTrackingMode}"
                              Style="{StaticResource SelectionRadioButtonStyle}"
                              GroupName="SelectionMode"
                              ToolTip="Focus Tracking">
                    <StackPanel Orientation="Vertical">
                            <Viewbox  Style="{StaticResource ViewBoxStyle}">
                            <ContentControl Content="{StaticResource EnableFocusTrackingModeIcon}" />
                        </Viewbox>
                    </StackPanel>
                </RadioButton>
                <Rectangle Width="12"
                           Height="32" />
                <ToggleButton IsChecked="{Binding EnableXPath}"
                              Style="{StaticResource RibbonButtonStyle}"
                              ToolTip="Display EnableXPathIcon">
                    <StackPanel Orientation="Vertical">
                            <Viewbox  Style="{StaticResource ViewBoxStyle}">
                            <ContentControl Content="{StaticResource EnableXPathIcon}" />
                        </Viewbox>
                    </StackPanel>
                </ToggleButton>
            </StackPanel>
                <StackPanel HorizontalAlignment="Right"
                            Orientation="Horizontal">
                    <Button Style="{StaticResource RibbonButtonStyle}"
                            Command="{Binding InfoCommand}">
                        <StackPanel Orientation="Vertical">
                                                <Viewbox
                                                    Style="{StaticResource ViewBoxStyle}">
                                                    <ContentControl Content="{StaticResource InfoIcon}"
                                                                    HorizontalContentAlignment="Center"
                                                                    VerticalContentAlignment="Center"/>
                                                </Viewbox>
                                            </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        
            <StatusBar d:DataContext="{d:DesignInstance viewModels:MainViewModel}"
                       DockPanel.Dock="Bottom">
                <StatusBarItem>
                    <Label Content="{Binding SelectedAutomationType, FallbackValue=None}" />
                </StatusBarItem>
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal"
                                Visibility="{Binding EnableXPath, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Label>EnableXPathIcon:</Label>
                        <TextBox VerticalAlignment="Center">
                            <TextBox.Style>
                                <Style BasedOn="{StaticResource SelectableLabel}"
                                       TargetType="{x:Type TextBox}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding EnableXPath}"
                                                     Value="True">
                                            <Setter Property="Text" Value="{Binding SelectedItem.XPath, FallbackValue=None, Mode=OneWay}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </StackPanel>
                </StatusBarItem>
                <StatusBarItem HorizontalAlignment="Right">
                    <Button BorderThickness="0"
                            Command="{Binding OpenErrorListCommand}"
                            Visibility="{Binding ErrorCount, Converter={StaticResource CountToVisibilityConverter}}">
                        <Button.ToolTip>
                            <TextBlock>
                                <Run Text="Errors :" />
                                <Run Text="{Binding ErrorCount, Mode=OneWay}" />
                            </TextBlock>
                        </Button.ToolTip>
        
                        <Viewbox Width="16"
                                 Height="16"
                                 Stretch="Uniform">
                            <ContentControl Content="{StaticResource ErrorIcon}" />
                        </Viewbox>
                    </Button>
                </StatusBarItem>
            </StatusBar>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <GroupBox Grid.Column="0"
                          d:DataContext="{d:DesignInstance {x:Type viewModels:MainViewModel}}"
                          Header="{Binding SelectedAutomationType, FallbackValue=None}">
                    <TreeView ItemsSource="{Binding Elements}"
                              SelectedItemChanged="TreeView_OnSelectedItemChanged">
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                                <Setter Property="core:TreeViewItemBringIntoViewBehavior.MonitorSelection" Value="True" />
                                <Setter Property="FontWeight" Value="Normal" />
                                <Style.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="FontWeight" Value="Bold" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TreeView.ItemContainerStyle>
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate DataType="{x:Type models:Element}"
                                                      ItemsSource="{Binding Children}">
                                <StackPanel Orientation="Horizontal">
                                    <Viewbox Width="16"
                                             Height="16"
                                             Margin="0,0,1,0"
                                             Stretch="Uniform">
                                        <ContentControl Style="{StaticResource TreeItemResourceStyle}" />
                                    </Viewbox>
                                    <Button Margin="0,0,5,0"
                                            Background="Transparent"
                                            BorderThickness="0"
                                            Command="{Binding Path=RefreshItemCommand}"
                                            CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType=StackPanel}}"
                                            DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType=TreeView}}"
                                            ToolTip="Refresh children list">
                                        <Viewbox Width="8"
                                                 Height="8"
                                                 Margin="0,0,1,0"
                                                 Stretch="Uniform"
                                                 Visibility="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsMouseOver, Converter={StaticResource BooleanToCollapsedVisibilityConverter}}">
                                            <ContentControl Content="{StaticResource RefreshIcon}" />
                                        </Viewbox>
                                    </Button>
                                    <TextBlock>
                                        <TextBlock.ToolTip>
                                            <MultiBinding StringFormat="{}{0} &quot;{1}&quot; &quot;{2}&quot;">
                                                <Binding Path="ControlType" />
                                                <Binding Path="Name" />
                                                <Binding Path="AutomationId" />
                                            </MultiBinding>
                                        </TextBlock.ToolTip>
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0} &quot;{1}&quot; &quot;{2}&quot;">
                                                <Binding Path="ControlType" />
                                                <Binding Path="Name" />
                                                <Binding Path="AutomationId" />
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>
                </GroupBox>
                <GridSplitter Grid.Column="1"
                              HorizontalAlignment="Stretch" />
                <GroupBox Grid.Column="2"
                          Header="Details">
                    <ScrollViewer>
                        <ItemsControl ItemsSource="{Binding ElementPatterns}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid d:DataContext="{d:DesignInstance {x:Type models:ElementPatternItem}}"
                                          Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Expander IsExpanded="{Binding IsExpanded}"
                                                  Style="{StaticResource BorderedHeaderExpander}">
                                            <Expander.Header>
                                                <DockPanel LastChildFill="True">
                                                    <Viewbox Width="16"
                                                             Height="16"
                                                             Margin="0,0,1,0"
                                                             Stretch="Uniform">
                                                        <ContentControl Style="{StaticResource DetailsResourceStyle}" />
                                                    </Viewbox>
                                                    <TextBlock VerticalAlignment="Center"
                                                               Text="{Binding PatternName}" />
                                                </DockPanel>
                                            </Expander.Header>
                                            <ItemsControl AlternationCount="2"
                                                          Grid.IsSharedSizeScope="True"
                                                          ItemsSource="{Binding Children}">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Border Margin="0" Padding="0">
                                                            <Border.Background>
                                                                <MultiBinding Converter="{StaticResource AlternationToColorConverter}">
                                                                    <Binding Path="(ItemsControl.AlternationIndex)"
                                                                             RelativeSource="{RelativeSource Mode=FindAncestor,
                                                                                                             AncestorType=ContentPresenter}" />
                                                                </MultiBinding>
                                                            </Border.Background>
        
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="130"
                                                                                      SharedSizeGroup="DetailColumnKey" />
                                                                    <ColumnDefinition Width="*" />
                                                                </Grid.ColumnDefinitions>
                                                                <TextBox Grid.Column="0"
                                                                         IsReadOnly="True"
                                                                         Text="{Binding Key}">
                                                                    <TextBox.Style>
                                                                        <Style BasedOn="{StaticResource SelectableLabel}"
                                                                               TargetType="{x:Type TextBox}">
                                                                            <Style.Triggers>
                                                                                <DataTrigger Binding="{Binding Value}"
                                                                                             Value="Yes">
                                                                                    <Setter Property="FontWeight" Value="Bold" />
                                                                                </DataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </TextBox.Style>
                                                                </TextBox>
                                                                <TextBox Grid.Column="1"
                                                                         Margin="5,0,0,0"
                                                                         IsReadOnly="True"
                                                                         Text="{Binding Value}"
                                                                         TextWrapping="Wrap">
                                                                    <TextBox.Style>
                                                                        <Style BasedOn="{StaticResource SelectableLabel}"
                                                                               TargetType="{x:Type TextBox}">
                                                                            <Style.Triggers>
                                                                                <DataTrigger Binding="{Binding Value}"
                                                                                             Value="Yes">
                                                                                    <Setter Property="TextBox.Foreground" Value="Green" />
                                                                                    <Setter Property="FontWeight" Value="Bold" />
                                                                                </DataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </TextBox.Style>
                                                                </TextBox>
                                                                <Button Grid.Column="1" Click="InvokePatternActionHandler" Content="{Binding Value}">
                                                                    <Button.Style>
                                                                        <Style TargetType="{x:Type Button}">
                                                                            <Setter Property="Visibility" Value="Hidden"/>
                                                                            <Style.Triggers>
                                                                                <DataTrigger Binding="{Binding HasExecutableAction}" Value="True">
                                                                                    <Setter Property="Visibility" Value="Visible"/>
                                                                                </DataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </Button.Style>
                                                                </Button>
                                                            </Grid>
                                                        </Border>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </Expander>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </GroupBox>
            </Grid>
        </DockPanel>
        <Grid Visibility="{Binding IsInfoVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              Background="#d0000000">
            <Border Background="White"
                    Width="600"
                    Height="400">
                <DockPanel LastChildFill="True" Margin="16 0">
                    <StackPanel DockPanel.Dock="Bottom">
                        <Border BorderBrush="Black"
                                Margin="0 4"
                                BorderThickness="0 1 0 0">
                            <Button Content="{StaticResource CloseIcon}"
                                    Command="{Binding CloseInfoCommand}"
                                    Margin="0 8"
                                    HorizontalAlignment="Right" />
                        </Border>
                    </StackPanel>
                    <Grid>
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <TextBlock Text="Fla UI Inspect" HorizontalAlignment="Center" FontSize="32"
                                       VerticalAlignment="Center" />
                            <TextBlock HorizontalAlignment="Center" FontSize="24" >
                                <Run Text="Version: "/>
                                <Run Text="{Binding ApplicationVersion}" />
                            </TextBlock>
                        </StackPanel>

                        <StackPanel Orientation="Vertical"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Bottom">
                            <TextBlock Text="by Roman Roemer" HorizontalAlignment="Right" FontSize="16" />
                            <TextBlock Text="by Kostiantyn Usenko {kDg}" HorizontalAlignment="Right" FontSize="16" />
                            <TextBlock Text="copyright FlaUI, 2025" HorizontalAlignment="Right" FontSize="14"
                                       Margin="0 8 0 0" />
                        </StackPanel>
                    </Grid>
                </DockPanel>
            </Border>
        </Grid>
    </Grid>
</Window>